###############################################################################
# WEB INTERACTION RECORDER - EXPORT FILE 03: SERVICE WORKER
###############################################################################
# This file contains the background service worker script
# Files included:
# - src/background/service-worker.js
###############################################################################

================================================================================
FILE: src/background/service-worker.js
================================================================================
let recordingState = {
  isRecording: false,
  tabId: null,
  sessionId: null,
  interactions: []
};

console.log('[WIR Service Worker] Initialized');

// Test helper function for debugging
globalThis.testExport = async function() {
  console.log('[TEST] Running export test...');
  console.log('[TEST] Current recording state:', recordingState);
  
  // If no active recording, create dummy data
  if (!recordingState.sessionId || recordingState.interactions.length === 0) {
    console.log('[TEST] No active recording, creating dummy data...');
    recordingState = {
      isRecording: false,
      tabId: 1,
      sessionId: 'test_' + Date.now().toString(36),
      startTime: new Date().toISOString(),
      endTime: new Date().toISOString(),
      interactions: [{
        type: 'click',
        sequenceNumber: 1,
        timestamp: new Date().toISOString(),
        interaction: { type: 'click', coordinates: { x: 100, y: 200 } },
        element: { tagName: 'button', text: 'Test Button' },
        context: { pageUrl: 'http://test.com' },
        screenshots: { before: 'dummy', after: 'dummy' },
        nlpDescription: 'Test click'
      }]
    };
  }
  
  try {
    const result = await exportRecording();
    console.log('[TEST] Export successful:', result);
    return result;
  } catch (error) {
    console.error('[TEST] Export failed:', error);
    return error;
  }
};

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  switch (request.action) {
    case 'START_RECORDING':
      startRecording(request.tabId).then(() => {
        sendResponse({ status: 'started' });
      });
      return true; // Keep message channel open for async response
      
    case 'STOP_RECORDING':
      stopRecording();
      sendResponse({ status: 'stopped' });
      break;
      
    case 'GET_RECORDING_STATE':
      sendResponse({ 
        isRecording: recordingState.isRecording,
        interactionCount: recordingState.interactions.length 
      });
      break;
      
    case 'ADD_INTERACTION':
      console.log('[WIR Service Worker] Received ADD_INTERACTION, isRecording:', recordingState.isRecording, 'sender tab:', sender.tab?.id, 'recording tab:', recordingState.tabId);
      if (recordingState.isRecording && sender.tab?.id === recordingState.tabId) {
        addInteraction(request.data);
        sendResponse({ status: 'added' });
      } else {
        console.log('[WIR Service Worker] Ignoring interaction - not recording or wrong tab');
        sendResponse({ status: 'ignored' });
      }
      break;
      
    case 'CAPTURE_SCREENSHOT':
      captureScreenshot(sender.tab.id).then(screenshot => {
        sendResponse({ screenshot });
      });
      return true;
      
    case 'EXPORT_RECORDING':
      console.log('[WIR Service Worker] EXPORT_RECORDING message received');
      exportRecording().then(data => {
        console.log('[WIR Service Worker] Export completed, sending response');
        sendResponse({ data });
      }).catch(error => {
        console.error('[WIR Service Worker] Export error:', error);
        sendResponse({ error: error.message });
      });
      return true;
      
    case 'CLEAR_RECORDING':
      clearRecording();
      sendResponse({ status: 'cleared' });
      break;
  }
});

async function startRecording(tabId) {
  recordingState = {
    isRecording: true,
    tabId: tabId,
    sessionId: generateSessionId(),
    interactions: [],
    startTime: new Date().toISOString()
  };
  
  console.log('[WIR Service Worker] Recording started for tab:', tabId, 'session:', recordingState.sessionId);
  
  // Listen for tab update to know when reload is complete
  const tabUpdateListener = (updatedTabId, changeInfo) => {
    if (updatedTabId === tabId && changeInfo.status === 'complete') {
      console.log('[WIR Service Worker] Tab reloaded, sending RECORDING_STARTED');
      
      // Remove this listener
      chrome.tabs.onUpdated.removeListener(tabUpdateListener);
      
      // Send message to content script
      chrome.tabs.sendMessage(tabId, { 
        action: 'RECORDING_STARTED',
        sessionId: recordingState.sessionId 
      }).then(() => {
        console.log('[WIR Service Worker] RECORDING_STARTED sent successfully');
      }).catch(err => {
        console.error('[WIR Service Worker] Failed to send RECORDING_STARTED:', err);
      });
    }
  };
  
  chrome.tabs.onUpdated.addListener(tabUpdateListener);
}

function stopRecording() {
  if (recordingState.isRecording && recordingState.tabId) {
    chrome.tabs.sendMessage(recordingState.tabId, { 
      action: 'RECORDING_STOPPED' 
    });
  }
  
  recordingState.isRecording = false;
  recordingState.endTime = new Date().toISOString();
}

function addInteraction(interactionData) {
  console.log('[WIR Service Worker] Adding interaction:', interactionData.type);
  const interaction = {
    ...interactionData,
    sequenceNumber: recordingState.interactions.length + 1,
    timestamp: new Date().toISOString()
  };
  
  recordingState.interactions.push(interaction);
  console.log('[WIR Service Worker] Total interactions:', recordingState.interactions.length);
  
  chrome.storage.local.set({
    [`session_${recordingState.sessionId}`]: recordingState
  });
}

async function captureScreenshot(tabId) {
  try {
    const screenshot = await chrome.tabs.captureVisibleTab(null, {
      format: 'png',
      quality: 90
    });
    return screenshot;
  } catch (error) {
    console.error('Screenshot capture failed:', error);
    return null;
  }
}

async function exportRecording() {
  console.log('[WIR Service Worker] Exporting recording, current state:', recordingState);
  
  // If no current recording, try to get from storage
  if (!recordingState.sessionId || recordingState.interactions.length === 0) {
    console.log('[WIR Service Worker] No active recording, checking storage...');
    const storage = await chrome.storage.local.get(null);
    const sessionKeys = Object.keys(storage).filter(key => key.startsWith('session_'));
    
    if (sessionKeys.length > 0) {
      // Get the most recent session
      const latestSession = storage[sessionKeys[sessionKeys.length - 1]];
      console.log('[WIR Service Worker] Found session in storage:', latestSession);
      recordingState = latestSession;
    }
  }
  
  const exportData = {
    sessionId: recordingState.sessionId,
    startTime: recordingState.startTime,
    endTime: recordingState.endTime || new Date().toISOString(),
    interactions: recordingState.interactions,
    metadata: {
      version: '1.0.0',
      extensionName: 'Web Interaction Recorder'
    }
  };
  
  const blob = new Blob([JSON.stringify(exportData, null, 2)], {
    type: 'application/json'
  });
  
  const url = URL.createObjectURL(blob);
  const filename = `recording_${recordingState.sessionId}.json`;
  
  console.log('[WIR Service Worker] Downloading file:', filename);
  console.log('[WIR Service Worker] Export data:', exportData);
  
  chrome.downloads.download({
    url: url,
    filename: filename
  }, (downloadId) => {
    if (chrome.runtime.lastError) {
      console.error('[WIR Service Worker] Download failed:', chrome.runtime.lastError);
    } else {
      console.log('[WIR Service Worker] Download started with ID:', downloadId);
    }
  });
  
  return exportData;
}

function generateSessionId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function clearRecording() {
  const sessionIdToRemove = recordingState.sessionId;
  
  recordingState = {
    isRecording: false,
    tabId: null,
    sessionId: null,
    interactions: []
  };
  
  if (sessionIdToRemove) {
    chrome.storage.local.remove(`session_${sessionIdToRemove}`);
  }
}